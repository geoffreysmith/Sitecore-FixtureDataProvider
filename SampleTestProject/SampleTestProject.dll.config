<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="sitecore" type="Sitecore.Configuration.ConfigReader, Sitecore.Kernel" />
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, Sitecore.Logging" />
  </configSections>
  <appSettings>
    <add key="samplekml" value="E:\Visual Studio 2010 Projects\FixtureDataProvider\SampleTestProject\data\sample import data\Topcastles_Netherlands.kml"/>
    <add key="samplekml_unparseable" value="E:\Visual Studio 2010 Projects\FixtureDataProvider\SampleTestProject\data\sample import data\Topcastles_Netherlands_unparseable.kml"/>
  </appSettings>
  <sitecore>
    <sc.variable name="dataFolder" value="E:\Visual Studio 2010 Projects\FixtureDataProvider\SampleTestProject\data\" />
    <dataProviders>
      <fixturedatamaster type="FixtureDataProvider.FixtureDataProvider, FixtureDataProvider">
        <!-- Enter pipe separated paths to directories containing serialized data, directories containing TDS items or individual package files (zip) -->
        <param desc="sources">E:\Visual Studio 2010 Projects\FixtureDataProvider\SampleTestProject\data\serializeddata\master|E:\Visual Studio 2010 Projects\FixtureDataProvider\SampleTestProject\data\packages\Kml template.zip</param>
      </fixturedatamaster>
    </dataProviders>
    <databases>
      <database id="core" singleInstance="true" type="Sitecore.Data.Database, Sitecore.Kernel">
        <param desc="name">$(id)</param>
        <icon>People/16x16/cubes_blue.png</icon>
        <!--<dataProviders hint="list:AddDataProvider">
          <dataProvider ref="dataProviders/fixturedatacore">
          </dataProvider>
        </dataProviders>-->
        <securityEnabled>false</securityEnabled>
        <proxiesEnabled>false</proxiesEnabled>
        <publishVirtualItems>false</publishVirtualItems>
      </database>
      <database id="master" singleInstance="true" type="Sitecore.Data.Database, Sitecore.Kernel">
        <param desc="name">$(id)</param>
        <icon>People/16x16/cubes_blue.png</icon>
        <dataProviders hint="list:AddDataProvider">
          <dataProvider ref="dataProviders/fixturedatamaster">
          </dataProvider>
        </dataProviders>
        <securityEnabled>false</securityEnabled>
        <proxiesEnabled>false</proxiesEnabled>
        <publishVirtualItems>false</publishVirtualItems>
      </database>
    </databases>
    <itemManager defaultProvider="default">
      <providers>
        <clear />
        <add name="default" type="Sitecore.Data.Managers.ItemProvider, Sitecore.Kernel" />
      </providers>
    </itemManager>
    <!-- PIPELINES -->
    <pipelines>
      <initialize>
      </initialize>
      <shutdown>
      </shutdown>
      <preprocessRequest>
      </preprocessRequest>
      <httpRequestBegin>
      </httpRequestBegin>
      <httpRequestEnd>
      </httpRequestEnd>
      <job>
      </job>
      <publish>
      </publish>
      <publishItem>
      </publishItem>
      <renderLayout>
      </renderLayout>
      <healthMonitor>
      </healthMonitor>
      <sessionEnd>
      </sessionEnd>
      <getMediaStream>
      </getMediaStream>
      <setupEditFrame>
      </setupEditFrame>
      <expandInitialFieldValue>
      </expandInitialFieldValue>
      <expandBranchItemName>
      </expandBranchItemName>
      <convertToDesignTimeHtml>
      </convertToDesignTimeHtml>
      <convertToRuntimeHtml>
      </convertToRuntimeHtml>
      <fixXHtml>
      </fixXHtml>
      <renderItemTile>
      </renderItemTile>
      <getAboutInformation>
      </getAboutInformation>
      <getLookupSourceItems>
      </getLookupSourceItems>
      <getRenderingPreview>
      </getRenderingPreview>
      <getContentEditorFields>
      </getContentEditorFields>
      <getContentEditorSkin>
      </getContentEditorSkin>
      <getContentEditorWarnings>
      </getContentEditorWarnings>
      <getPlaceholderRenderings>
      </getPlaceholderRenderings>
      <getQueryState>
      </getQueryState>
      <renderContentEditor>
      </renderContentEditor>
      <renderField>
      </renderField>
      <search>
      </search>
      <getSyndicationWarnings>
      </getSyndicationWarnings>
      <word.parseDocx>
      </word.parseDocx>
      <word.renderHtml>
      </word.renderHtml>
      <filterItem>
      </filterItem>
      <insertRenderings>
      </insertRenderings>
      <getChromeData>
      </getChromeData>
      <getRenderingDatasource>
      </getRenderingDatasource>
      <loadRichTextContent>
      </loadRichTextContent>
      <saveRichTextContent>
      </saveRichTextContent>
      <getMediaCreatorOptions>
      </getMediaCreatorOptions>
    </pipelines>
    <!-- AUTHENTICATION -->
    <authentication defaultProvider="forms">
      <providers>
        <clear />
        <add name="forms" type="Sitecore.Security.Authentication.FormsAuthenticationProvider, Sitecore.Kernel" />
      </providers>
    </authentication>
    <httpAuthentication defaultProvider="Basic">
      <providers>
        <clear />
        <add name="Basic" type="Sitecore.Security.Authentication.BasicHttpAuthenticationProvider, Sitecore.Kernel">
          <Realm>sitecore</Realm>
        </add>
      </providers>
    </httpAuthentication>
    <!-- USERS -->
    <userManager enabled="true">
      <providers>
        <clear />
      </providers>
    </userManager>
    <!-- ROLES -->
    <rolesInRolesManager enabled="true">
      <providers>
        <clear />
      </providers>
    </rolesInRolesManager>
    <!-- AUTHORIZATION -->
    <authorization defaultProvider="allowall">
      <providers>
        <clear />
        <add name="allowall" type="FixtureDataProvider.Mocking.AlwaysAllowAuthorizationProvider, FixtureDataProvider" />
      </providers>
    </authorization>
    <!-- 
      ACCESS RIGHTS 
      Example of a <rights> element using a custom type (which must derive from AccessRight):
      <add name="my:access" comment="Custom right." title="Custom" type="My.Security.MyAccessRight, My.Assembly"/> 
      
      Example of a <rules> element using a custom type (which must derive from AcessRightRule):
      <add prefix="my:" typeName="My.MyEntity" type="My.MyAcessRightRule, My.Assembly"/>
      -->
    <accessRights defaultProvider="config">
      <providers>
        <clear />
        <add name="config" type="Sitecore.Security.AccessControl.ConfigAccessRightProvider, Sitecore.Kernel" configRoot="accessRights" />
      </providers>
      <rights defaultType="Sitecore.Security.AccessControl.AccessRight, Sitecore.Kernel">
        <add name="field:read" comment="Read right for fields." title="Field Read" />
        <add name="field:write" comment="Write right for fields." title="Field Write" modifiesData="true" />
        <add name="item:read" comment="Read right for items." title="Read" />
        <add name="item:write" comment="Write right for items." title="Write" modifiesData="true" />
        <add name="item:rename" comment="Rename right for items." title="Rename" modifiesData="true" />
        <add name="item:create" comment="Create right for items." title="Create" modifiesData="true" />
        <add name="item:delete" comment="Delete right for items." title="Delete" modifiesData="true" />
        <add name="item:admin" comment="Admin right for items." title="Administer" modifiesData="true" />
        <add name="language:read" comment="Read right for languages." title="Language Read" />
        <add name="language:write" comment="Write right for languages." title="Language Write" modifiesData="true" />
        <add name="site:enter" comment="The right to enter a site." title="Site Enter" />
        <add name="insert:show" comment="Determines if the user can see the insert option" title="Show in Insert" />
        <add name="workflowState:delete" comment="The right to delete an item based on its workflow state." title="Workflow State Delete" />
        <add name="workflowState:write" comment="The right to write an item based on its workflow state." title="Workflow State Write" modifiesData="true" />
        <add name="workflowCommand:execute" comment="The right to execute a workflow command." title="Workflow Command Execute" />
        <add name="*" comment="Wildcard right. For internal use only." />
      </rights>
      <rules>
        <add prefix="field:" ancestor="{3C1715FE-6A13-4FCF-845F-DE308BA9741D}" comment="/sitecore/templates" />
        <add prefix="insert:" templateId="{35E75C72-4985-4E09-88C3-0EAC6CD1E64F}" comment="insert:show for Branch template" />
        <add prefix="insert:" templateId="{B2613CC1-A748-46A3-A0DB-3774574BD339}" comment="insert:show for Command template" />
        <add prefix="insert:" templateId="{AB86861A-6030-46C5-B394-E8F99E8B87DB}" comment="insert:show for Template template" />
        <add prefix="item:" typeName="Sitecore.Data.Items.Item" />
        <add prefix="language:" ancestor="{64C4F646-A3FA-4205-B98E-4DE2C609B60F}" comment="/sitecore/system/language" />
        <add prefix="workflowState:" ancestor="{05592656-56D7-4D85-AACF-30919EE494F9}" comment="/sitecore/system/workflows" />
        <add prefix="workflowCommand:" ancestor="{05592656-56D7-4D85-AACF-30919EE494F9}" comment="/sitecore/system/workflows" />
      </rules>
    </accessRights>
    <!-- CONFIG STORES -->
    <configStores>
    </configStores>
    <!-- DOMAINS -->
    <domainManager defaultProvider="config">
      <providers>
        <clear />
        <add name="config" type="Sitecore.SecurityModel.ConfigDomainProvider, Sitecore.Kernel" domainList="domainManager/domains" defaultDomain="sitecore" />
      </providers>
      <!-- Sample for use with config provider above -->
      <domains>
        <domain id="sitecore" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
          <param desc="name">$(id)</param>
          <ensureAnonymousUser>false</ensureAnonymousUser>
        </domain>
        <domain id="extranet" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
          <param desc="name">$(id)</param>
          <ensureAnonymousUser>true</ensureAnonymousUser>
        </domain>
        <domain id="default" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
          <param desc="name">$(id)</param>
          <ensureAnonymousUser>true</ensureAnonymousUser>
          <isDefault>true</isDefault>
        </domain>
      </domains>
    </domainManager>
    <!-- STANDARD VALUES -->
    <standardValues defaultProvider="sitecore">
      <providers>
        <clear />
        <add name="sitecore" type="Sitecore.Data.StandardValuesProvider, Sitecore.Kernel" />
      </providers>
    </standardValues>
    <!--  SITES -->
    <siteManager defaultProvider="config">
      <providers>
        <clear />
          <add name="config" type="Sitecore.Sites.ConfigSiteProvider, Sitecore.Kernel" siteList="sites" checkSecurity="false" />
      </providers>
    </siteManager>
  </sitecore>
  <log4net>
    <root>
      <priority value="NONE" />
    </root>
  </log4net>
</configuration>